#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'twoStacks' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER maxSum
 *  2. INTEGER_ARRAY a
 *  3. INTEGER_ARRAY b
 */

int twoStacks(int maxSum, vector<int> a, vector<int> b) {
    int n = a.size();
    int m = b.size();

    // Hitung berapa banyak elemen yang bisa diambil dari stack a
    int takenFromA = 0, sum = 0;
    while (takenFromA < n && sum + a[takenFromA] <= maxSum) {
        sum += a[takenFromA];
        takenFromA++;
    }

    int maxScore = takenFromA;

    // Coba tambahkan elemen dari stack b satu per satu, dan kurangi elemen dari stack a jika diperlukan
    int takenFromB = 0;
    while (takenFromB < m && takenFromA >= 0) {
        sum += b[takenFromB];
        takenFromB++;

        // Kurangi elemen dari stack a jika jumlah sudah melebihi maksimum
        while (sum > maxSum && takenFromA > 0) {
            takenFromA--;
            sum -= a[takenFromA];
        }

        // Periksa apakah skor saat ini lebih besar dari skor maksimum yang ditemukan sejauh ini
        if (sum <= maxSum) {
            maxScore = max(maxScore, takenFromA + takenFromB);
        }
    }

    return maxScore;
}

int main()
{
    // ofstream fout(getenv("OUTPUT_PATH"));
    // Buang output file karena output akan ditampilkan di terminal
    // string g_temp;
    // getline(cin, g_temp);
    // int g = stoi(ltrim(rtrim(g_temp)));

    // for (int g_itr = 0; g_itr < g; g_itr++) {
    //     string first_multiple_input_temp;
    //     getline(cin, first_multiple_input_temp);
    //     vector<string> first_multiple_input = split(rtrim(first_multiple_input_temp));
    //     int n = stoi(first_multiple_input[0]);
    //     int m = stoi(first_multiple_input[1]);
    //     int maxSum = stoi(first_multiple_input[2]);
    //     string a_temp_temp;
    //     getline(cin, a_temp_temp);
    //     vector<string> a_temp = split(rtrim(a_temp_temp));
    //     vector<int> a(n);
    //     for (int i = 0; i < n; i++) {
    //         int a_item = stoi(a_temp[i]);
    //         a[i] = a_item;
    //     }
    //     string b_temp_temp;
    //     getline(cin, b_temp_temp);
    //     vector<string> b_temp = split(rtrim(b_temp_temp));
    //     vector<int> b(m);
    //     for (int i = 0; i < m; i++) {
    //         int b_item = stoi(b_temp[i]);
    //         b[i] = b_item;
    //     }
    //     int result = twoStacks(maxSum, a, b);
    //     fout << result << "\n";
    // }

    // Buat input secara langsung untuk testing
    vector<int> a = {4, 5, 2, 1, 1};
    vector<int> b = {3, 1, 1, 2};
    int maxSum = 11;
    int result = twoStacks(maxSum, a, b);
    cout << result << endl;  // Tampilkan output langsung di terminal

    // fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
